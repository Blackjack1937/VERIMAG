
voici en gros comment on a organisé notre approche :

d’abord, on considère trois types d’attaquants :

non-adaptatif black-box : il choisit toutes ses entrées d’avance, sans se baser sur les réponses.

adaptatif black-box : il ne connaît pas le code mais s’ajuste en fonction de la réussite ou de l’échec observé.

symbolique (white-box) : il a accès au code et peut faire du model-counting, du max#sat, etc.

nous, on se concentre sur l’attaquant black-box adaptatif pour l’apprentissage par renforcement.

le programme cible est un binaire c qu’on appelle via echo "X=... Y=..." | ./target.bin. il renvoie expolit=1 ou 0. si c’est 1, on donne +10, si c’est 0, on met -1. pas d’instrumentation spéciale, donc vraiment black-box.

pour l’état qu’on utilise en rl, on se limite à (last_x, last_y, last_success, step_index). c’est super minimal : on mémorise juste l’action précédente (x,y), si ça a marché ou pas (last_success=0 ou 1), et le nombre de tentatives déjà faites (step_index). ça donne un côté adaptatif (car on peut changer l’action suivante en fonction de la réussite précédente), mais on n’a pas de fenêtre d’historique plus large.

pour l’espace d’actions, on a décidé d’être totalement discret, de 0 à 100 pour x et de 0 à 1000 pour y. ça fait 101101 actions en tout. certes c’est énorme, mais c’est notre choix définitif pour l’instant. pas d’actions continues.

la récompense, on la fixe : +10 quand l’exploit est déclenché, -1 sinon. on n’ajoute pas de récompenses “intermédiaires”. pareil, le facteur de discount γ on le met à 1, donc on somme juste les récompenses sur la durée d’une “épisode”. dans chaque épisode, on a un max de 50 tentatives, ou on s’arrête dès qu’on obtient +10.

niveau aléatoire, on dit que dans le programme c, y_r est déterminé au début de chaque épisode et reste fixe pendant les 50 essais (si on va jusque-là). donc l’attaquant peut tomber sur un seed favorable ou non mais ne le voit pas. ça reste du black-box total.

enfin, la mise en œuvre : on ne code pas le binaire c dans python, on le compile à part, puis on l’appelle via stdin. on lit l’output, on convertit “exploit=1” en +10, etc. et hop. c’est tout.

voilà, c’est l’idée générale qu’on pourra détailler selon les questions.